openapi: 3.1.0

info:
  version: '1.0.0'
  title: 'E-Commerce API'
  description: 'API for managing brands, products, and user cart'

servers:
  - url: http://localhost:3000/api

paths:
  /brands:
    get:
      summary: Get all brands
      responses:
        '200':
          description: An array of brands
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'

  /brands/{id}/products:
    get:
      summary: Get products by brand
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: Brand id

      responses:
        '200':
          $ref: '#/components/responses/Products'
        '400':
          $ref: '#/components/responses/Invalid'

  /products:
    get:
      summary: Get all products
      responses:
        '200':
          $ref: '#/components/responses/Products'

  /login:
    post:
      summary: Login a user
      requestBody:
        description: Check user credentials and return token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'

      responses:
        '200':
          description: User token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

        '400':
          $ref: '#/components/responses/Invalid'

        '401':
          $ref: '#/components/responses/Unauthorized'

  /me/cart:
    security:
      - bearerAuth: []

    get:
      summary: Return contents of users cart
      security:
        - BearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/CartItems'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Add product to users cart
      security:
        - BearerAuth: []
      requestBody:
        description: Product id to be added to cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  $ref: '#/components/schemas/Id'
      responses:
        '201':
          $ref: '#/components/responses/CartItem'
        '400':
          $ref: '#/components/responses/Invalid'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Invalid'

  /me/cart/{productId}:
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: integer
          minimum: 1
        description: Product ID

    delete:
      summary: Remove product from users cart
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Product removed from cart
        '400':
          $ref: '#/components/responses/Products'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update quantity of product in users cart
      security:
        - BearerAuth: []
      requestBody:
        description: New quantity
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  $ref: '#/components/schemas/Quantity'
      responses:
        '200':
          $ref: '#/components/responses/CartItem'
        '400':
          $ref: '#/components/responses/Invalid'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  responses:
    CartItems:
      description: An array of cart items
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CartItem'

    CartItem:
      description: Successfully added to cart
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CartItem'

    Products:
      description: An array of products
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Product'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Invalid:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Id:
      type: integer
      minimum: 1

    Quantity:
      type: integer
      minimum: 1

    Brand:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string

    Product:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        categoryId:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        description:
          type: string
        price:
          type: number
        imageUrls:
          type: array
          items:
            type: string

    CartItem:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        quantity:
          $ref: '#/components/schemas/Quantity'

    User:
      type: object
      properties:
        gender:
          type: string
          enum: [male, female]
        cart:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        name:
          type: object
          properties:
            title:
              type: string
            first:
              type: string
            last:
              type: string
        location:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            postcode:
              type: integer
        email:
          type: string
          format: email
        login:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
        dob:
          type: string
          format: date-time
        registered:
          type: string
          format: date-time
        phone:
          type: string
        cell:
          type: string
        picture:
          type: object
          properties:
            large:
              type: string
              format: uri
            medium:
              type: string
              format: uri
            thumbnail:
              type: string
              format: uri
        nat:
          type: string
          description: Nationality code (e.g., "IE" for Ireland)

    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    Token:
      type: object
      properties:
        token:
          type: string
          description: JWT token

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
